<!DOCTYPE html>
<html>
    <head>
        <title>BoilerBot Electrical System Monitor</title>
        <link rel="icon" href="favicon.ico">
        <link rel="stylesheet" href="site.css">
        <script src="Chart.bundle.min.js"></script>
        <script src="unpack.js"></script>
        <script src="config.js"></script>
    </head>
    <body>
        <div class="container">
            <div>
                <h1>BoilerBot Electrical System Monitor</h1>
                <h3>Date Time: <i id="response"></i></h3>
            </div>
            <div class="row">
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
            </div>
            <div class="row">
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-4">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
            </div>
        </div>
        
        <script>
            // Set the axis to zero
            const startTime = Math.floor(((new Date()).getTime() - (new Date()).getTimezoneOffset() * 60000) / 1000) - 17;
            const msg_structure = 'Iffff?HHHHHH??';
            const socket = new WebSocket('ws://192.168.4.1/ws');
            const readSerializedStruct = (inputBlob) => {
                const temporaryFileReader = new FileReader();
                return new Promise((resolve, reject) => {
                    temporaryFileReader.onerror = () => {
                        temporaryFileReader.abort();
                        reject(new DOMException("Problem parsing input file."));
                    };

                    temporaryFileReader.onload = () => {
                        resolve(temporaryFileReader.result);
                    };
                    temporaryFileReader.readAsArrayBuffer(inputBlob);
                });
            };

            function toggleChartSize(event) {
                canvas = event.currentTarget;
                if (canvas.parentNode.style.width == '') {
                    canvas.parentNode.style.width = '50vw'
                    canvas.parentNode.style.height = '50vw'
                    canvas.style.border = 'thin solid rgba(255, 99, 132, 1)'
                    canvas.style['border-radius'] = '2vw'
                    canvas.style['box-shadow'] = '10px 10px 5px #888888';
                } else {
                    canvas.parentNode.style.width = ''
                    canvas.parentNode.style.height = ''
                    canvas.style.border = ''
                    canvas.style['box-shadow'] = ''
                }
            };

            // Update chart data
            function addData(chart, label, data) {
                chart.data.labels.push(label);
                chart.data.datasets.forEach((dataset) => {
                    dataset.data.push(data);
                });
                chart.update();
            }

            // Connection opened
            socket.addEventListener('open', function (event) {
                socket.send('Hello Server!');
                // Continuously trigger data sending
                const REFRESH_RATE_HZ = 5; 
                setInterval(() => {
                    console.log('Trigger data');
                    socket.send('t');
                }, 1000 / REFRESH_RATE_HZ);
            });

            // Listen for messages
            socket.addEventListener('message', async function (event) {
                rawData = event.data;
                sensorDataArrays = await readSerializedStruct(rawData);
                msg = unpack(sensorDataArrays, msg_structure);
                console.log('Received Message from server ', msg[0]);
                var node = document.getElementById("response");
                node.innerHTML = Date().toString();

                for (let i = 0; i < ctxs.length; i++) {
                    addData(charts[i], msg[0] - startTime, msg[i + 1]);
                }
            });

            var ctxs = document.getElementsByClassName("canvas")
            var charts = new Array();
            for (var i = 0; i < ctxs.length; i++) {
                var ctx = ctxs[i];
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            data: [],
                            fill: false,
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                scaleLabel: {
                                    display: true,
                                    labelString: chartsAxesConfig[i].ylabel
                                }
                            }],
                            xAxes: [{
                                scaleLabel: {
                                    display: true,
                                    labelString: chartsAxesConfig[i].xlabel
                                }
                            }]
                        },
                        title: {
                            display: true,
                            text: chartsAxesConfig[i].name
                        },
                        legend: {
                            display: false
                        }
                    }
                });
                myChart.canvas.onclick = toggleChartSize;
                charts.push(myChart);
            }
        </script>
    </body>
</html>