<!DOCTYPE html>
<html>
    <head>
        <title>BoilerBot Electrical System Monitor</title>
        <link rel="icon" href="favicon.ico">
        <link rel="stylesheet" href="site.css">
        <script src="Chart.bundle.min.js"></script>
        <script src="unpack.js"></script>
        <script src="config.js"></script>
    </head>
    <body>
        <div class="container">
            <div>
                <h1>BoilerBot Electrical System Monitor</h1>
                <h2>Date Time: <i id="response"></i></h2>
            </div>
            <div class="row">
                <div class="col-6">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-6">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
                <div class="col-6">
                    <canvas class="canvas" width="200" height="200"></canvas>
                </div>
            </div>
        </div>
        
        <script>
            const msg_structure = 'Iffff?ffffff??';
            const socket = new WebSocket('ws://' + window.location.hostname + '/ws');
            const readSerializedStruct = (inputBlob) => {
                const temporaryFileReader = new FileReader();
                return new Promise((resolve, reject) => {
                    temporaryFileReader.onerror = () => {
                        temporaryFileReader.abort();
                        reject(new DOMException("Problem parsing input file."));
                    };

                    temporaryFileReader.onload = () => {
                        resolve(temporaryFileReader.result);
                    };
                    temporaryFileReader.readAsArrayBuffer(inputBlob);
                });
            };

            // Update chart data
            function addData(chart, label, data) {
                chart.data.labels.push(label);
                chart.data.datasets.forEach((dataset) => {
                    dataset.data.push(data);
                });
                chart.update();
            }

            // Connection opened
            socket.addEventListener('open', function (event) {
                socket.send('Hello Server!');
                // Continuously trigger data sending
                const REFRESH_RATE_HZ = 5; 
                setInterval(() => {
                    console.log('Trigger data');
                    socket.send('t');
                }, 1000 / REFRESH_RATE_HZ);
            });

            // Listen for messages
            socket.addEventListener('message', async function (event) {
                rawData = event.data;
                sensorDataArrays = await readSerializedStruct(rawData);
                msg = unpack(sensorDataArrays, msg_structure);
                console.log('Received Message from server ', msg[0]);
                var node = document.getElementById("response");
                node.innerHTML = (new Date(msg[0])).toString();

                for (let i = 0; i < ctxs.length; i++) {
                    addData(charts[i], msg[0], msg[i + 1]);
                }
            });

            var ctxs = document.getElementsByClassName("canvas")
            var charts = new Array();
            for (var i = 0; i < ctxs.length; i++) {
                var ctx = ctxs[i];
                // Demo code
                // var time = [0, 1, 2, 3, 4, 5];
                // var variable = new Array(time.length);
                // var points = new Array(time.length);

                // for (var j = 0; j < time.length; j++) {
                //     variable[j] = Math.sin(time[j] + i * j);
                //     points[j] = {
                //         x: time[j],
                //         y: variable[j]
                //     }
                // }
                var myChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: [],
                        datasets: [{
                            label: '#: ' + i.toString(),
                            data: [],
                            fill: false,
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            yAxes: [{
                                ticks: {
                                    beginAtZero: true
                                }
                            }]
                        }
                    }
                });
                charts.push(myChart);
            }
        </script>
    </body>
</html>